@model lojabanco.Models.ProdutoModel
<h1>Criar Produto</h1>

<form method="POST">
    <div class="mb-3">
        <label class="form-label" asp-for="Nome">Nome</label>
        <input type="text" class="form-control" id="nome" asp-for="Nome">
        <span asp-validation-for="Nome" class="text-danger"></span>

        <label for="preco" class="form-label" asp-for="Preco">Preço</label>
        <input type="text" class="form-control" id="preco" asp-for="Preco">
        <span asp-validation-for="Preco" class="text-danger"></span>

        <label asp-for="Descricao" class="form-label">Descriçao</label>
        <textarea type="text" class="form-control" id="descricao" asp-for="Descricao"></textarea>
        <span asp-validation-for="Descricao" class="text-danger"></span>

        <button type="submit" class="btn btn-primary">Salvar</button>
        <a asp-action="Index" class="btn btn-secondary">Cancelar</a>
  
    </div>
</form>


 

@section Scripts{

    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial.cshtml");
    }
    <script>    
         $.validator.method.number = function(value, element){
             return this.optional(element) || /^-?(?:\d+|\d{1,3}(?:[\s.,]\d{3})+)(?:[.,]\d+)?$/.test(value.replace(/,/g, '.'));
        }

        $.validator.methods.range = function (value, element, param) {
            var val = value.replace(",", ".");
            return this.optional(element) || (val >= param[0] && val <= param[1]);
        };        
    </script>
}

